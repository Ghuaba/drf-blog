version: "3.9"

services:
  # Database (Postgres)
  django_db:
    image: postgres:15-alpine
    container_name: postgresql
    restart: unless-stopped
    environment:
      POSTGRES_USER: django
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: django_db
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U django -d django_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - django_network

  # Redis
  django_redis:
    image: redis:7-alpine
    container_name: django_redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - django_network

  # Django App
  backend:
    build:
      context: .
      dockerfile: dockerfile
    container_name: django
    command: uvicorn core.asgi:application --host 0.0.0.0 --port 8000 --reload
    volumes:
      - .:/app
    ports:
      - 8000:8000
    env_file:
      - core/.env
    restart: unless-stopped
    depends_on:
      django_db:
        condition: service_healthy
      django_redis:
        condition: service_healthy
    networks:
      - django_network

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: dockerfile
    container_name: blog_celery_worker
    command: celery -A core worker --loglevel=info --concurrency=2
    volumes:
      - .:/app
    env_file:
      - core/.env
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_started
      django_db:
        condition: service_healthy
      django_redis:
        condition: service_healthy
    networks:
      - django_network

  # Celery Beat
  celery_beat:
    build:
      context: .
      dockerfile: dockerfile
    container_name: blog_celery_beat
    command: celery -A core beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
    env_file:
      - core/.env
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_started
      django_db:
        condition: service_healthy
      django_redis:
        condition: service_healthy
    networks:
      - django_network

networks:
  django_network:
    driver: bridge

volumes:
  dbdata:
